;--------------------------------------------------------------------------
; Program begin at symbol main
; Computes statistics (min, max, ave, variance) about a vector of data, 
; and prints the results to stdout.
;--------------------------------------------------------------------------
               	.data       ; start of data space
      
length: 	.word32 8   ; number of elements in the vector, a 32-bit unsigned integer.

                           ; the vector; each element is a 32-bit signed integer.
vector: 	.word32  207,-12,9,-2200,100,-1259,-999,108 


;  Blocks needed to support system calls to the printf function.         
printfstring0: .asciiz "The maximum is %d.\n\n"
printfparams0: .space  8    ; space to store pointer to printfstring0.
maximum:  	.word32 0    ; space to store result to be printed, a 32-bit integer.     

printfstring1: .asciiz "The minimum is %d.\n\n"
printfparams1: .space  8    ; space to store pointer to printfstring1.
minimum:       .word32 0    ; space to store result to be printed, a 32-bit integer.                          

printfstring2: .asciiz "The average is %d.\n\n"
printfparams2: .space  8    ; space to store pointer to printfstring2.
average:       .word32 0    ; space to store result to be printed, a 32-bit integer. 


               .text        ; start of code space
               
main:
        lwu r1, length(r0)     ; load 32-bit unsigned integer at length label.
        addi r2, r0, 4          ; **independent instr to save stall**; initialize r2 to vector[1] for the loop
        sll r8, r1, 2           ; r8 = length*4 for proper memory segments
        
        lw r4, vector(r0)       ; r4 is min register and init to vector[0]
        lw r5, vector(r0)       ; r5 is max register and init to vector[0]
        ld r6, vector(r0)       ; r6 is average register and init to vector[0]
        
        add r10, r0, r0                  ; init r10 to be shift counter
        addi r11, r0, 1                  ; r11 = 1 the boundary cond.
loop:   
        BEQ r2, r8, done
        lw r3, vector(r2)       ; load signed element from vector indexed by r2
        addi r2, r2, 4          ; increment counter
        
        slt r7, r3, r4          ; sets r7 to 1 if r3 is less than r4(min)
        slt r9, r5, r3          ; if r5 is less than r3 sets r9 to 1
        movn r4, r3, r7         ; if r7 is 1 then move r3 into r4(new min)
        dadd r6, r6, r3         ; **independent instr to save stall**; keep running sum of elements
        movn r5, r3, r9         ; moves r3 into r5 if r3 was larger than last r5
        
        J loop                  ; unconditional jump to loop

lp2:
        BEQ r1, r11, out                ; if the length is shifted to 1 exit loop
        srl r1, r1, 1                   ; shift r1 right by 1
        addi r10, r10, 1                ; increment shift counter
        J lp2                           ; uncond jump

out:
        dsrlv r6, r6, r10               ; shift r6 by shift counter to get avg = sum/n

        sd r5, maximum(r0)
        daddi r1, r0, printfstring0     ; r1 now holds pointer to string to print
        sd r1, printfparams0(r0)        ; put pointer first inyv parameters section
        daddi r14, r0, printfparams0    ; syscall 5 expects address of parameters in r14.
        syscall 5
        
        sd r4, minimum(r0)
        daddi r1, r0, printfstring1     ; r1 now holds pointer to string to print
        sd r1, printfparams1(r0)        ; put pointer first in parameters section
        daddi r14, r0, printfparams1    ; syscall 5 expects address of parameters in r14.
        syscall 5

        sd r6, average(r0)
        daddi r1, r0, printfstring2     ; r5 now holds pointer to string to print
        sd r1, printfparams2(r0)        ; put pointer first in parameters section
        daddi r14, r0, printfparams2    ; syscall 5 expects address of parameters in r14.
        syscall 5

        ; stop execution.
        syscall 0

        
